@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@page "/customer"
@using CustomerManagement.BlazorUI.Pages.Shared
@inject CustomerService CustomerService
@inject HttpClient Http
@inject IJSRuntime JS

<div style="background-color: #fff; border-radius: 15px; padding: 20px;">
    <div class="row" style="margin-bottom: 15px;">
        <div class="col-6">
            <h3 style="margin-top: 15px !important; font-weight: bold;">
                Customers
            </h3>
        </div>
        <div class="col-6 text-end">
            <label @onclick="OpenNewModal" style="margin-top: 15px !important;" data-bs-toggle="tooltip" data-bs-placement="top" title="Add a Customer">
                <a style="font-size: small;margin-top: 5px !important; cursor: pointer;">
                    <i class="fa-solid fa-circle-plus fa-2xl" style="margin-left: 5px; color: #008bd2;"></i>
                </a>
            </label>

            <label @onclick="DownloadCustomerExport" style="margin-top: 15px !important;" data-bs-toggle="tooltip" data-bs-placement="top" title="Download Customers">
                <a style="font-size: small;margin-top: 5px !important; cursor: pointer;">
                    <i class="fa-solid fa-file-arrow-down fa-2xl" style="margin-left: 5px; color: #008bd2;"></i>
                </a>
            </label>
        </div>
    </div>

    @if (Customers == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <div class="row justify-content-md-center">
            <div class="col">
                <table class="table table-striped">
                    <thead>
                        <tr class="text-center">
                            <th scope="col">#</th>
                            <th scope="col">Name</th>
                            <th scope="col">Phone</th>
                            <th scope="col">Fax</th>
                            <th scope="col">Address</th>
                            <th scope="col">Coworkers</th>
                            <th scope="col">City</th>
                            <th scope="col">Operation</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            var counter = 1;
                        }
                        @foreach (var customer in Customers)
                        {
                            <tr class="text-center">
                                <td style="padding-top:15px !important; padding-bottom: 15px;">
                                    @counter
                                </td>
                                <td style="padding-top:15px !important; padding-bottom: 15px;">
                                    @customer.Name
                                </td>
                                <td style="padding-top:15px !important; padding-bottom: 15px;">
                                    @customer.Phone
                                </td>
                                <td style="padding-top:15px !important; padding-bottom: 15px;">
                                    @customer.Fax
                                </td>
                                <td style="padding-top:15px !important; padding-bottom: 15px;">
                                    @customer.Address
                                </td>
                                <td style="padding-top:15px !important; padding-bottom: 15px;">
                                    @customer.Coworkers
                                </td>
                                <td style="padding-top:15px !important; padding-bottom: 15px;">
                                    @customer.CityTitle
                                </td>
                                <td style="padding-top:15px !important; padding-bottom: 15px;">
                                    <label data-bs-toggle="tooltip" data-bs-placement="top" title="Edit Customer">
                                        <a @onclick="@(() => OpenEditModal(customer))" style="font-size: small; cursor: pointer;">
                                            <i class="fa-solid fa-pen fa-lg" style="color: #fec107;"></i>
                                        </a>
                                    </label>
                                    <label data-bs-toggle="tooltip" data-bs-placement="top" title="Delete Customer">
                                        <a @onclick="@(() => AskDelete(customer))" style="font-size: small; cursor: pointer;">
                                            <i class="fa-solid fa-trash fa-lg" style="margin-left: 10px; color: #dc3546;"></i>
                                        </a>
                                    </label>
                                </td>
                            </tr>
                            counter++;
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }

</div>

<CreateOrEditModal @ref="customerModal" Title="@modalTitle" OnClose="RefreshCustomers">
    <CustomerForm Customer="@selectedCustomer" OnSaved="RefreshCustomers" />
</CreateOrEditModal>

<DeleteConfirmationModal @ref="deleteModal" OnConfirm="ConfirmDelete" Message="@deleteMessage" />


@code {
    private List<CustomerDto>? Customers;
    private CustomerDto selectedCustomer = new();
    private CreateOrEditModal? customerModal;
    private string modalTitle = "Customer";
    private DeleteConfirmationModal? deleteModal;
    private int deleteId;
    private string deleteMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await RefreshCustomers();
    }

    private async Task RefreshCustomers()
    {
        Customers = await CustomerService.GetAllAsync();
        StateHasChanged();
    }

    private void OpenNewModal()
    {
        selectedCustomer = new CustomerDto();
        modalTitle = "New Customer";
        customerModal?.Show();
    }

    private void OpenEditModal(CustomerDto customer)
    {
        selectedCustomer = new CustomerDto
        {
            Id = customer.Id,
            Name = customer.Name,
            Phone = customer.Phone,
            Fax = customer.Fax,
            Address = customer.Address,
            Coworkers = customer.Coworkers,
            CityId = customer.CityId
        };
        modalTitle = "Edit Customer";
        customerModal?.Show();
    }

    private void AskDelete(CustomerDto customer)
    {
        deleteId = customer.Id;
        deleteMessage = $"Are you sure of deleting {customer.Name}?";
        deleteModal?.Show();
    }

    private async Task ConfirmDelete()
    {
        await CustomerService.DeleteAsync(deleteId);
        await RefreshCustomers();
    }

    private async Task DownloadCustomerExport()
    {
        var response = await Http.GetAsync("api/Customer/export");

        if (response.IsSuccessStatusCode)
        {
            var stream = await response.Content.ReadAsStreamAsync();
            var fileName = "customers.txt";

            using var streamRef = new DotNetStreamReference(stream);
            await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        }
    }
}