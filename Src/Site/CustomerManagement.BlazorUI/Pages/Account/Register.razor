@page "/register"
@layout EmptyLayout
@inject AuthService AuthService
@inject NavigationManager Navigation

<EditForm Model="registerModel" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="d-flex justify-content-center align-items-center vh-100">
        <div class="col-md-4" style="background-color: #fff; border-radius: 15px; padding: 20px;">

            <h2>Register</h2>
            <hr />
            <div class="form-floating mb-3">
                <InputText @bind-Value="registerModel.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label asp-for="Input.Email">Email</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="registerModel.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label asp-for="Input.Password">Password</label>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <p class="text-danger mt-2">@errorMessage</p>
            }

            <div class="mt-3 text-center">
                <span>Already have an account?</span>
                <NavLink href="/login" class="ms-1">Login</NavLink>
            </div>
        </div>
    </div>

</EditForm>

@code {
    private AuthRequest registerModel = new();
    private string? errorMessage;

    private async Task HandleRegister()
    {
        var success = await AuthService.RegisterAsync(registerModel);
        if (success)
            Navigation.NavigateTo("/customer");
        else
            errorMessage = "Registration failed.";
    }
}
